"""
Django settings for t4c project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#Environment variables
import dotenv
from dotenv import load_dotenv
dotenv.load_dotenv()
load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'u0m4qrjun-(cr*!_r8poltelrzhhms*1^wuo&coin24$*ea)41'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ALLOWED_HOSTS = ['*']


# Application definition


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # 'whitenoise.runserver_nostatic',  # new
    'cloudinary_storage',
    'django.contrib.staticfiles',
    # 'storages',
    'cloudinary',
    #Apps
    'digital',
    #Third Party
    'paypal.standard.ipn',
]


CRISPY_TEMPLATE_PACK = "bootstrap4"

DEFAULT_FROM_EMAIL = "T4cDigital <info@t4cdigital.com>"

# AUTH_USER_MODEL = 'digital.MyUser'

# WHITENOISE_MANIFEST_STRICT = False

#Celery
CELERY_BROKER_URL = os.getenv("REDIS_URL") 
CELERY_RESULT_BACKEND =  os.getenv("REDIS_URL") 
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

CLOUDINARY_URL = os.getenv("CLOUDINARY_URL_ALT")
# CLOUDI_NAME = os.getenv('CLOUDINARY_NAME')
# CLOUDI_API_KEY = os.getenv('CLOUDINARY_API_KEY')
# CLOUDI_API_SECRET = os.getenv('CLOUDINARY_SECRET_KEY')


EMAIL_BACKEND ='django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_RECEIVER = os.getenv("EMAIL_RECEIVER")
EMAIL_HOST_PASSWORD =  os.getenv("EMAIL_HOST_PASSWORD")



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 't4c.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 't4c.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases


if DEBUG:
    DATABASES = {
     'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }

    }
else:
    DATABASES = {
      'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.getenv("NAME"),
        'USER' : os.getenv("USER"),
        'PASSWORD': os.getenv("PASSWORD"),
        'PORT': '5432',
        'HOST':os.getenv("HOST"),
    }
    }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/


if  DEBUG:
# django_project/settings.py
    # DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.StaticHashedCloudinaryStorage'
    STATIC_URL = "/static/"
    # STATICFILES_STORAGE = 'cloudinary_storage.storage.StaticHashedCloudinaryStorage'
    STATIC_ROOT = 'static'
    STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'digit_cdn'),
    )
    MEDIA_URL = '/media/'
    MEDIA_ROOT=os.path.join(BASE_DIR,'media')

else:
    # AWS_LOCATION = 'static'
    # AWS_ACCESS_KEY_ID =os.getenv('AWS_CLIENT_KEY')
    # AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_KEY')
    # AWS_STORAGE_BUCKET_NAME = os.getenv('BUCKET_NAME')
    # AWS_S3_CUSTOM_DOMAIN='%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    # AWS_S3_OBJECT_PARAMETERS = {    
    #     'CacheControl': 'max-age=86400',
    # }
    # DEFAULT_FILE_STORAGE = 't4c.storage_backends.MediaStorage'
    # STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
    STATICFILES_STORAGE = 'cloudinary_storage.storage.StaticHashedCloudinaryStorage'
    STATIC_URL = '/digital_cdn/'
    STATIC_ROOT = 'digital_cdn'
    MEDIA_URL = '/media/'
    MEDIA_ROOT=os.path.join(BASE_DIR,'media')
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'digit_cdn')
    ] 

    CLOUDINARY_STORAGE = {
    # other settings, like credentials
    'MEDIA_TAG': 'media',
    'STATIC_TAG': 'digital_cdn',
    'MAGIC_FILE_PATH': 'magic',
    'PREFIX': '/media/',
    'STATICFILES_MANIFEST_ROOT': os.path.join(BASE_DIR, 'manifest')
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
             'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
        },
    },
}


